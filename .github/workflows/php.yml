name: PHP Composer and Docker Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout repository
    - uses: actions/checkout@v4

    # PHP Composer steps
    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    # Docker steps
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Build and push PHP application
    - name: Build and push PHP Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/praktikum_popl4:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/praktikum_popl4:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/praktikum_popl4:buildcache,mode=max

    # Create multi-container Docker Compose deployment
    - name: Create docker-compose.yml
      run: |
        cat > docker-compose.yml << EOL
        version: '3.8'

        services:
          web:
            image: ${{ secrets.DOCKERHUB_USERNAME }}/praktikum_popl4:latest
            ports:
              - "80:80"
            depends_on:
              - mysql
            environment:
              - DB_HOST=mysql
              - DB_USER=root
              - DB_PASSWORD=${{ secrets.DB_PASSWORD }}
              - DB_NAME=global_master
            networks:
              - app-network

          mysql:
            image: mysql:5.7
            environment:
              MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
              MYSQL_DATABASE: global_master
            ports:
              - "3306:3306"
            volumes:
              - mysql_data:/var/lib/mysql
            networks:
              - app-network

        networks:
          app-network:
            driver: bridge

        volumes:
          mysql_data:
        EOL

    # Optional: Deploy to server (example using SSH)
    # - name: Deploy to server
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SERVER_HOST }}
    #     username: ${{ secrets.SERVER_USER }}
    #     key: ${{ secrets.SERVER_SSH_KEY }}
    #     script: |
    #       cd /path/to/deployment
    #       docker-compose down
    #       docker-compose pull
    #       docker-compose up -d

    # Optional: Run tests
    # - name: Run test suite
    #   run: composer run-script test
